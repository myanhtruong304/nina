// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: project_info.sql

package db

import (
	"context"
	"database/sql"
)

const createProjectInfo = `-- name: CreateProjectInfo :one
INSERT INTO projects_info (
    project_name,
    twitter,
    facebook,
    linkedin,
    medium,
    telegram,
    website,
    git,
    cmc,
    coingecko) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING project_name, symbol, contract_address, explorer, twitter, facebook, linkedin, medium, telegram, website, git, cmc, coingecko, created_at
`

type CreateProjectInfoParams struct {
	ProjectName string         `json:"project_name"`
	Twitter     sql.NullString `json:"twitter"`
	Facebook    sql.NullString `json:"facebook"`
	Linkedin    sql.NullString `json:"linkedin"`
	Medium      sql.NullString `json:"medium"`
	Telegram    sql.NullString `json:"telegram"`
	Website     sql.NullString `json:"website"`
	Git         sql.NullString `json:"git"`
	Cmc         sql.NullString `json:"cmc"`
	Coingecko   sql.NullString `json:"coingecko"`
}

func (q *Queries) CreateProjectInfo(ctx context.Context, arg CreateProjectInfoParams) (ProjectsInfo, error) {
	row := q.queryRow(ctx, q.createProjectInfoStmt, createProjectInfo,
		arg.ProjectName,
		arg.Twitter,
		arg.Facebook,
		arg.Linkedin,
		arg.Medium,
		arg.Telegram,
		arg.Website,
		arg.Git,
		arg.Cmc,
		arg.Coingecko,
	)
	var i ProjectsInfo
	err := row.Scan(
		&i.ProjectName,
		&i.Symbol,
		&i.ContractAddress,
		&i.Explorer,
		&i.Twitter,
		&i.Facebook,
		&i.Linkedin,
		&i.Medium,
		&i.Telegram,
		&i.Website,
		&i.Git,
		&i.Cmc,
		&i.Coingecko,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects_info WHERE project_name = $1
`

func (q *Queries) DeleteProject(ctx context.Context, projectName string) error {
	_, err := q.exec(ctx, q.deleteProjectStmt, deleteProject, projectName)
	return err
}

const getListProjects = `-- name: GetListProjects :many
SELECT project_name, symbol, contract_address, explorer, twitter, facebook, linkedin, medium, telegram, website, git, cmc, coingecko, created_at FROM projects_info
ORDER BY project_name
`

func (q *Queries) GetListProjects(ctx context.Context) ([]ProjectsInfo, error) {
	rows, err := q.query(ctx, q.getListProjectsStmt, getListProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectsInfo
	for rows.Next() {
		var i ProjectsInfo
		if err := rows.Scan(
			&i.ProjectName,
			&i.Symbol,
			&i.ContractAddress,
			&i.Explorer,
			&i.Twitter,
			&i.Facebook,
			&i.Linkedin,
			&i.Medium,
			&i.Telegram,
			&i.Website,
			&i.Git,
			&i.Cmc,
			&i.Coingecko,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneProject = `-- name: GetOneProject :one
SELECT project_name, symbol, contract_address, explorer, twitter, facebook, linkedin, medium, telegram, website, git, cmc, coingecko, created_at FROM projects_info
WHERE project_name = $1
LIMIT 1
`

func (q *Queries) GetOneProject(ctx context.Context, projectName string) (ProjectsInfo, error) {
	row := q.queryRow(ctx, q.getOneProjectStmt, getOneProject, projectName)
	var i ProjectsInfo
	err := row.Scan(
		&i.ProjectName,
		&i.Symbol,
		&i.ContractAddress,
		&i.Explorer,
		&i.Twitter,
		&i.Facebook,
		&i.Linkedin,
		&i.Medium,
		&i.Telegram,
		&i.Website,
		&i.Git,
		&i.Cmc,
		&i.Coingecko,
		&i.CreatedAt,
	)
	return i, err
}
