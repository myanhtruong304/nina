// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: content.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOneContent = `-- name: CreateOneContent :one
INSERT INTO content (
    project_name,
    content,
    char_count,
    image_link,
    platform,
    content_type,
    created_at,
    upload) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, project_name, content, char_count, image_link, image_id, platform, content_type, updated_at, created_at, upload
`
type CreateOneContentParams struct {
	ProjectName string         `json:"project_name"`
	Content     string         `json:"content"`
	CharCount   int32          `json:"char_count"`
	ImageLink   sql.NullString `json:"image_link"`
	Platform    string         `json:"platform"`
	ContentType string         `json:"content_type"`
	CreatedAt   time.Time      `json:"created_at"`
	Upload      bool           `json:"upload"`
}

func (q *Queries) CreateOneContent(ctx context.Context, arg CreateOneContentParams) (Content, error) {
	row := q.queryRow(ctx, q.createOneContentStmt, createOneContent,
		arg.ProjectName,
		arg.Content,
		arg.CharCount,
		arg.ImageLink,
		arg.Platform,
		arg.ContentType,
		arg.CreatedAt,
		arg.Upload,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Content,
		&i.CharCount,
		&i.ImageLink,
		&i.ImageID,
		&i.Platform,
		&i.ContentType,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Upload,
	)
	return i, err
}

const getAllContent = `-- name: GetAllContent :many
SELECT id, project_name, content, char_count, image_link, image_id, platform, content_type, updated_at, created_at, upload FROM content
ORDER BY project_name
`

func (q *Queries) GetAllContent(ctx context.Context) ([]Content, error) {
	rows, err := q.query(ctx, q.getAllContentStmt, getAllContent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Content,
			&i.CharCount,
			&i.ImageLink,
			&i.ImageID,
			&i.Platform,
			&i.ContentType,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Upload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContentOneProject = `-- name: GetContentOneProject :many
SELECT id, project_name, content, char_count, image_link, image_id, platform, content_type, updated_at, created_at, upload FROM content
WHERE project_name = $1
ORDER BY created_at
`

func (q *Queries) GetContentOneProject(ctx context.Context, projectName string) ([]Content, error) {
	rows, err := q.query(ctx, q.getContentOneProjectStmt, getContentOneProject, projectName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.ProjectName,
			&i.Content,
			&i.CharCount,
			&i.ImageLink,
			&i.ImageID,
			&i.Platform,
			&i.ContentType,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Upload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :one
UPDATE content SET content = $2
WHERE id = $1
RETURNING id, project_name, content, char_count, image_link, image_id, platform, content_type, updated_at, created_at, upload
`

type UpdateContentParams struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateContent(ctx context.Context, arg UpdateContentParams) (Content, error) {
	row := q.queryRow(ctx, q.updateContentStmt, updateContent, arg.ID, arg.Content)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Content,
		&i.CharCount,
		&i.ImageLink,
		&i.ImageID,
		&i.Platform,
		&i.ContentType,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Upload,
	)
	return i, err
}

const updateImageLink = `-- name: UpdateImageLink :one
UPDATE content SET image_link = $2, updated_at = $3
WHERE id = $1 RETURNING id, project_name, content, char_count, image_link, image_id, platform, content_type, updated_at, created_at, upload
`

type UpdateImageLinkParams struct {
	ID        int32          `json:"id"`
	ImageLink sql.NullString `json:"image_link"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateImageLink(ctx context.Context, arg UpdateImageLinkParams) (Content, error) {
	row := q.queryRow(ctx, q.updateImageLinkStmt, updateImageLink, arg.ID, arg.ImageLink, arg.UpdatedAt)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.ProjectName,
		&i.Content,
		&i.CharCount,
		&i.ImageLink,
		&i.ImageID,
		&i.Platform,
		&i.ContentType,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Upload,
	)
	return i, err
}

const updatePostStatus = `-- name: UpdatePostStatus :exec
UPDATE content SET upload = $2, updated_at = $3
WHERE id = $1
`

type UpdatePostStatusParams struct {
	ID        int32     `json:"id"`
	Upload    bool      `json:"upload"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePostStatus(ctx context.Context, arg UpdatePostStatusParams) error {
	_, err := q.exec(ctx, q.updatePostStatusStmt, updatePostStatus, arg.ID, arg.Upload, arg.UpdatedAt)
	return err
}
