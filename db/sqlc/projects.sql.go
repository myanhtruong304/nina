// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: projects.sql

package db

import (
	"context"
)

const addProject = `-- name: AddProject :one
INSERT INTO project (
    project_name,
    symbol,
    contract_address,
    owner,
    created_at
    ) VALUES ($1, $2, $3, $4, $5) RETURNING project_name
`

type AddProjectParams struct {
	ProjectName     string      `json:"project_name"`
	Symbol          string      `json:"symbol"`
	ContractAddress string      `json:"contract_address"`
	Owner           string      `json:"owner"`
	CreatedAt       interface{} `json:"created_at"`
}

func (q *Queries) AddProject(ctx context.Context, arg AddProjectParams) (string, error) {
	row := q.queryRow(ctx, q.addProjectStmt, addProject,
		arg.ProjectName,
		arg.Symbol,
		arg.ContractAddress,
		arg.Owner,
		arg.CreatedAt,
	)
	var project_name string
	err := row.Scan(&project_name)
	return project_name, err
}

const getAllProject = `-- name: GetAllProject :many
SELECT project_name, symbol, contract_address, owner, created_at FROM project
ORDER BY project_name
`

func (q *Queries) GetAllProject(ctx context.Context) ([]Project, error) {
	rows, err := q.query(ctx, q.getAllProjectStmt, getAllProject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectName,
			&i.Symbol,
			&i.ContractAddress,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT project_name, symbol, contract_address, owner, created_at FROM project
WHERE project_name = $1
LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, projectName string) (Project, error) {
	row := q.queryRow(ctx, q.getProjectStmt, getProject, projectName)
	var i Project
	err := row.Scan(
		&i.ProjectName,
		&i.Symbol,
		&i.ContractAddress,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}
