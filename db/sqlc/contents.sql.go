// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contents.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addContent = `-- name: AddContent :one
INSERT INTO contents (
    id,
    content,
    word_count,
    content_type,
    project_name,
    image_text,
    created_at
    ) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type AddContentParams struct {
	ID          string         `json:"id"`
	Content     string         `json:"content"`
	WordCount   int32          `json:"word_count"`
	ContentType sql.NullString `json:"content_type"`
	ProjectName string         `json:"project_name"`
	ImageText   sql.NullString `json:"image_text"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) AddContent(ctx context.Context, arg AddContentParams) (string, error) {
	row := q.queryRow(ctx, q.addContentStmt, addContent,
		arg.ID,
		arg.Content,
		arg.WordCount,
		arg.ContentType,
		arg.ProjectName,
		arg.ImageText,
		arg.CreatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateImageLink = `-- name: UpdateImageLink :one
UPDATE contents SET
    image_link = $2,
    last_updated_at = $3
WHERE id = $1 RETURNING image_link
`

type UpdateImageLinkParams struct {
	ID            string         `json:"id"`
	ImageLink     sql.NullString `json:"image_link"`
	LastUpdatedAt time.Time      `json:"last_updated_at"`
}

func (q *Queries) UpdateImageLink(ctx context.Context, arg UpdateImageLinkParams) (sql.NullString, error) {
	row := q.queryRow(ctx, q.updateImageLinkStmt, updateImageLink, arg.ID, arg.ImageLink, arg.LastUpdatedAt)
	var image_link sql.NullString
	err := row.Scan(&image_link)
	return image_link, err
}

const updateProgress = `-- name: UpdateProgress :one
UPDATE contents SET
    facebook_check = $2,
    twitter_check = $3,
    linkedin_check = $4
WHERE id = $1 RETURNING id
`

type UpdateProgressParams struct {
	ID            string         `json:"id"`
	FacebookCheck sql.NullString `json:"facebook_check"`
	TwitterCheck  sql.NullString `json:"twitter_check"`
	LinkedinCheck sql.NullString `json:"linkedin_check"`
}

func (q *Queries) UpdateProgress(ctx context.Context, arg UpdateProgressParams) (string, error) {
	row := q.queryRow(ctx, q.updateProgressStmt, updateProgress,
		arg.ID,
		arg.FacebookCheck,
		arg.TwitterCheck,
		arg.LinkedinCheck,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE contents SET
    schedule_time = $2
WHERE id = $1 RETURNING schedule_time
`

type UpdateScheduleParams struct {
	ID           string         `json:"id"`
	ScheduleTime sql.NullString `json:"schedule_time"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (sql.NullString, error) {
	row := q.queryRow(ctx, q.updateScheduleStmt, updateSchedule, arg.ID, arg.ScheduleTime)
	var schedule_time sql.NullString
	err := row.Scan(&schedule_time)
	return schedule_time, err
}
